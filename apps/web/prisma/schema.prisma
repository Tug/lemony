datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
  schemas  = ["public", "sandbox"]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique", "multiSchema", "views"]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.String
  access_token       String? @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.String
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
  @@schema("public")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
  @@schema("public")
}

model User {
  id                             String     @id @default(cuid())
  firstName                      String?
  lastName                       String?
  email                          String?
  phoneNumber                    String?
  emailVerified                  DateTime?
  phoneNumberVerified            DateTime?
  image                          String?
  birthDate                      DateTime?  @db.Date
  disclaimerAcceptedAt           DateTime?
  termsAndConditionsAcceptedAt   DateTime?
  privacyPolicyAcceptedAt        DateTime?
  nationality                    Country?   @relation(name: "nationality_country", fields: [nationalityCountryId], references: [id])
  countryOfResidence             Country?   @relation(name: "country_of_residence", fields: [countryOfResidenceId], references: [id])
  address                        Address?   @relation(name: "user_address", fields: [addressId], references: [id])
  nationalityCountryId           String?
  countryOfResidenceId           String?
  addressId                      String?
  createdAt                      DateTime   @default(now()) @map(name: "created_at")
  updatedAt                      DateTime   @updatedAt @map(name: "updated_at")
  disabled                       Boolean    @default(false)
  role                           Role       @default(USER)
  kycStatus                      KYCStatus?
  kycUpdatedAt                   DateTime?
  wallets                        Wallet[]
  accounts                       Account[]
  sessions                       Session[]
  sumsubId                       String?    @unique
  mangopayId                     String?    @unique
  mangopayWalletId               String?    @unique
  mangopayCreditsWalletId        String?    @unique
  sandboxMangopayId              String?
  sandboxMangopayWalletId        String?
  sandboxMangopayCreditsWalletId String?
  mangopayActiveCardId           String?
  locale                         String?
  companyId                      String?
  company                        Company?   @relation(name: "user_company", fields: [companyId], references: [id])
  settings                       Json       @default("{}")
  creditsEur                     Decimal    @default(0.0) @db.Decimal(12, 2)
  referralCode                   String?    @unique
  referrerId                     String?
  notificationsLastOpened        DateTime?
  xp                             Int        @default(0)
  klaviyoId                      String?
  klaviyoLastSyncedAt            DateTime?
  customerioLastSyncedAt         DateTime?
  leadSource                     String?

  sellerProjects          Project[]                @relation("seller_projects")
  initialInvestments      Project[]                @relation("initial_investments")
  currentInvestments      Project[]                @relation("current_investments")
  paymentsSent            Payment[]                @relation("payment_from_user")
  paymentsReceived        Payment[]                @relation("payment_to_user")
  orders                  Order[]
  tokenClaims             UserTokenClaim[]
  freeTokenPools          FreeTokenPool[]
  labels                  UserLabel[]
  deviceTokens            DeviceToken[]
  referrer                User?                    @relation(name: "referrer", fields: [referrerId], references: [id])
  sponsoredUsers          User[]                   @relation("referrer")
  bankAccounts            UserBankAccount[]
  userTokens              UserToken[]
  sandboxUserTokens       SandboxUserToken[]
  notificationsSent       Notification[]           @relation("notification_author")
  notificationsReceived   Notification[]           @relation("notification_recipient")
  notificationPreferences NotificationPreference[]

  sandboxOrders      SandboxOrder[]
  sandboxTokenClaims SandboxUserTokenClaim[]

  @@index([email])
  @@index([phoneNumber])
  @@index([referralCode])
  @@map("users")
  @@schema("public")
}

model UserLabel {
  id     String @id @default(cuid())
  userId String
  label  String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, label])
  @@index([label])
  @@map("userlabels")
  @@schema("public")
}

model Company {
  id                    String   @id @default(cuid())
  name                  String
  email                 String   @unique
  type                  String   @default("BUSINESS")
  addressId             String?
  address               Address? @relation(name: "company_address", fields: [addressId], references: [id])
  number                String
  iban                  String?
  bic                   String?
  mangopayBankAccountId String?

  employees User[] @relation("user_company")

  @@map("companies")
  @@schema("public")
}

model Address {
  id           String  @id @default(cuid())
  addressLine1 String
  addressLine2 String?
  city         String
  region       String?
  postalCode   String
  countryId    String
  country      Country @relation(name: "addresses_country", fields: [countryId], references: [id])

  users     User[]    @relation("user_address")
  companies Company[] @relation("company_address")

  @@map("addresses")
  @@schema("public")
}

model Wallet {
  id        String  @id @default(cuid())
  address   String  @unique
  owner     User?   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   String?
  isPrimary Boolean @default(false)
  metadata  Json?

  @@map("wallets")
  @@schema("public")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
  @@schema("public")
}

model Country {
  id   String @id @default(cuid())
  code String @unique
  name String

  residents User[]    @relation("country_of_residence")
  citizen   User[]    @relation("nationality_country")
  addresses Address[] @relation("addresses_country")

  @@map("countries")
  @@schema("public")
}

model ProductInInventory {
  id         String @id @default(cuid())
  externalId String @unique
  title      String
  supplier   String

  oracleProducts OracleProduct[]
  projects       ProductsInProjects[]

  @@map("productsininventory")
  @@schema("public")
}

model Oracle {
  id   String @id @default(cuid())
  name String @unique

  oracleProducts OracleProduct[]

  @@map("oracles")
  @@schema("public")
}

model OracleProduct {
  id              String   @id @default(cuid())
  externalId      String   @unique
  productId       String
  oracleId        String
  currency        String?
  updateFrequency String?
  hasVAT          Boolean  @default(false)
  hasFees         Boolean  @default(false)
  vatPercent      Decimal? @db.Decimal(12, 2)
  percentageFees  Decimal? @db.Decimal(12, 2)
  fixedFees       Decimal? @db.Decimal(12, 2)
  data            Json?
  enabled         Boolean  @default(true)

  product      ProductInInventory    @relation(fields: [productId], references: [id])
  oracle       Oracle                @relation(fields: [oracleId], references: [id])
  priceHistory OraclePriceSnapshot[]
  prices       OraclePrice[]

  @@unique([productId, oracleId])
  @@map("oracleproducts")
  @@schema("public")
}

model OraclePriceSnapshot {
  id              String   @id @default(cuid())
  oracleProductId String
  period          String
  updatedAt       DateTime @updatedAt
  data            Json
  metadata        Json?

  oracleProduct OracleProduct @relation(fields: [oracleProductId], references: [id])

  @@unique([oracleProductId, period])
  @@map("oraclepricesnapshots")
  @@schema("public")
}

model OraclePrice {
  id              String   @id @default(cuid())
  oracleProductId String
  period          String   @default("_1month")
  date            DateTime
  mean            Decimal  @db.Decimal(12, 2)
  min             Decimal? @db.Decimal(12, 2)
  max             Decimal? @db.Decimal(12, 2)
  currency        String   @default("EUR")
  updatedAt       DateTime @updatedAt

  oracleProduct OracleProduct @relation(fields: [oracleProductId], references: [id])

  @@unique([oracleProductId, period, date])
  @@map("oracleprices")
  @@schema("public")
}

model MangopayEvent {
  id          String    @id @default(cuid())
  resourceId  String
  eventType   String
  timestamp   DateTime
  createdAt   DateTime  @default(now())
  processedAt DateTime?

  @@unique([resourceId, eventType, timestamp])
  @@index([createdAt])
  @@map("mangopayevents")
  @@schema("public")
}

model Project {
  id                      String   @id @default(cuid())
  externalId              String?
  tokenSymbol             String   @unique
  tokenName               String
  tokenDecimals           Int      @default(3)
  slug                    String   @unique
  expectedAPR             Decimal  @db.Decimal(12, 2)
  title                   String?
  content                 Json?
  description             String?
  media                   Json?
  tags                    String[]
  ownerId                 String?
  mangopayWalletId        String?
  mangopayWalletCurrency  String?  @default("EUR")
  sandboxMangopayWalletId String?
  stoWalletAddress        String?
  targetPrice             Decimal  @db.Decimal(12, 2)
  maxSupplyInDecimal      BigInt   @db.Int8
  tokenPrice              Decimal  @default(10) @db.Decimal(12, 2)
  updatedAt               DateTime @updatedAt
  durationInMonths        Int
  visibility              String   @default("staging")
  visibleAt               DateTime
  crowdfundingStartsAt    DateTime
  crowdfundingEndsAt      DateTime
  percent                 Float    @default(0)
  crowdfundingStateId     String?  @unique
  documentUrl             String?
  feesPercent             Decimal  @default(5) @db.Decimal(12, 2)
  paid                    Boolean  @default(false)
  failed                  Boolean  @default(false)
  yearsForAPRCalculation  Int      @default(2)
  hasOwnPriceHistory      Boolean  @default(true)
  computedAPR             Decimal? @db.Decimal(12, 2)
  isPresale               Boolean  @default(false)
  exitDate                DateTime?
  exitPrice               Decimal? @db.Decimal(12, 2)
  exitFundsTxId           String?
  exitFundsTxDate         DateTime?

  products          ProductsInProjects[]
  crowdfundingState ProjectCrowdfundingState? @relation(fields: [crowdfundingStateId], references: [id])

  owner             User?              @relation(name: "seller_projects", fields: [ownerId], references: [id])
  initialInvestors  User[]             @relation("initial_investments")
  currentInvestors  User[]             @relation("current_investments")
  orders            Order[]
  sandboxOrders     SandboxOrder[]
  projectLocalized  ProjectI18N[]
  projectPrices     ProjectPrice[]
  userTokens        UserToken[]
  sandboxUserTokens SandboxUserToken[]
  tokenPrices       TokenPrice[]
  lastTokenPrice    LastTokenPrice?
  freeTokenPools    FreeTokenPool[]

  @@index([ownerId, crowdfundingStartsAt])
  @@index([ownerId, crowdfundingEndsAt])
  @@index([visibility, slug])
  @@map("projects")
  @@schema("public")
}

model ProjectI18N {
  projectId   String
  lang        String
  title       String?
  content     Json?
  description String?

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([projectId, lang])
  @@map("projectsi18n")
  @@schema("public")
}

model ProductsInProjects {
  projectId        String
  productId        String
  quantity         Int      @default(1)
  unitPrice        Decimal  @db.Decimal(12, 2)
  priceIncludesVAT Boolean  @default(false)
  purchaseDate     DateTime @default(now())
  vatPercentage    Decimal  @default(0.0) @db.Decimal(12, 2)
  resaleFeePercent Decimal  @default(0.0) @db.Decimal(12, 2)
  resaleFeeFixed   Decimal  @default(0.0) @db.Decimal(12, 2)

  project Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  product ProductInInventory @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([projectId, productId])
  @@map("productsinprojects")
  @@schema("public")
}

view ProjectPrice {
  projectId String
  period    String
  date      DateTime
  mean      Decimal? @db.Decimal(12, 2)
  min       Decimal? @db.Decimal(12, 2)
  max       Decimal? @db.Decimal(12, 2)

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, period, date])
  @@map("projectprices")
  @@schema("public")
}

view UserToken {
  userId       String
  projectId    String
  amountSpent  Decimal @db.Decimal(12, 2)
  currency     String  @default("EUR")
  quantity     Decimal
  initialPrice Decimal @db.Decimal(12, 2)
  initialValue Decimal @db.Decimal(12, 2)
  lastPrice    Decimal @db.Decimal(12, 2)
  lastValue    Decimal @db.Decimal(12, 2)

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
  @@map("usertokens")
  @@schema("public")
}

view LastTokenPrice {
  projectId String   @unique
  mean      Decimal  @db.Decimal(12, 2)
  min       Decimal? @db.Decimal(12, 2)
  max       Decimal? @db.Decimal(12, 2)

  project Project @relation(fields: [projectId], references: [id])

  @@map("lasttokenprices")
  @@schema("public")
}

view TokenPrice {
  projectId String
  period    String
  date      DateTime
  mean      Decimal  @db.Decimal(12, 2)
  min       Decimal? @db.Decimal(12, 2)
  max       Decimal? @db.Decimal(12, 2)

  project Project @relation(fields: [projectId], references: [id])

  @@unique([projectId, period, date])
  @@map("tokenprices")
  @@schema("public")
}

model ProjectCrowdfundingState {
  id              String   @id @default(cuid())
  collectedAmount Decimal  @db.Decimal(12, 2)
  maximumAmount   Decimal  @db.Decimal(12, 2)
  updatedAt       DateTime @updatedAt

  project Project?

  @@map("projectcrowdfundingstate")
  @@schema("public")
}

model Order {
  id                String             @id @default(cuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  projectId         String
  userId            String
  amount            Decimal            @db.Decimal(12, 2)
  currency          String             @default("EUR")
  quantityInDecimal BigInt             @db.Int8
  paymentId         String?            @unique
  paymentStatus     PaymentStatus?
  status            OrderStatus        @default(pending)
  fundsSource       FundsSourceType?
  invoiceUrl        String?
  type              OrderType          @default(BUY)
  executionType     OrderExecutionType @default(INITIAL)
  version           Int                @default(0)

  project Project @relation(fields: [projectId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@index([userId, projectId, status, createdAt])
  @@map("orders")
  @@schema("public")
}

model Payment {
  id             String          @id @default(cuid())
  fromUserId     String
  toUserId       String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  amount         Decimal         @db.Decimal(12, 2)
  transferId     String?         @unique
  transferStatus PaymentStatus?
  status         OrderStatus     @default(pending)
  fundsSource    FundsSourceType @default(FREE_CREDITS)
  tag            String?
  resourceId     String?
  fromUser       User            @relation(name: "payment_from_user", fields: [fromUserId], references: [id])
  toUser         User            @relation(name: "payment_to_user", fields: [toUserId], references: [id])

  @@index([fromUserId, toUserId, status, resourceId])
  @@map("payments")
  @@schema("public")
}

model DeviceToken {
  id        String   @id @default(cuid())
  userId    String
  platform  String
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform, token])
  @@map("devicetokens")
  @@schema("public")
}

model UserBankAccount {
  id                    String   @id @default(cuid())
  userId                String
  mangopayBankAccountId String
  label                 String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  disabled              Boolean  @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, mangopayBankAccountId])
  @@map("userbankaccounts")
  @@schema("public")
}

model Notification {
  id          String             @id @default(cuid())
  recipientId String
  authorId    String?
  type        String
  createdAt   DateTime           @default(now())
  visibleAt   DateTime
  imgUrl      String?
  content     Json?
  status      NotificationStatus @default(pending)
  receiptId   String?

  recipient User  @relation(name: "notification_recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  author    User? @relation(name: "notification_author", fields: [authorId], references: [id], onDelete: Cascade)

  @@index([recipientId, visibleAt, type])
  @@index([visibleAt, status])
  @@map("notifications")
  @@schema("public")
}

model NotificationPreference {
  userId           String
  notificationType String
  enabled          Boolean  @default(true)
  lastUpdated      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, notificationType])
  @@map("notificationpreferences")
  @@schema("public")
}

model FreeTokenPool {
  id               String   @id @default(cuid())
  projectId        String
  ownerId          String
  sizeInDecimal    BigInt   @db.Int8
  offeredInDecimal BigInt   @default(0) @db.Int8
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  project                Project                 @relation(fields: [projectId], references: [id])
  owner                  User                    @relation(fields: [ownerId], references: [id])
  userTokenClaims        UserTokenClaim[]
  sandboxUserTokenClaims SandboxUserTokenClaim[]

  @@index([projectId, ownerId])
  @@map("freetokenpools")
  @@schema("public")
}

model UserTokenClaim {
  id                String   @id @default(cuid())
  userId            String
  quantityInDecimal BigInt   @default(1000) @db.Int8
  createdAt         DateTime @default(now())
  expiresAt         DateTime @default(dbgenerated("(now() + '90 days'::interval)::timestamp"))
  poolId            String

  user User          @relation(fields: [userId], references: [id])
  pool FreeTokenPool @relation(fields: [poolId], references: [id])

  @@index([userId, createdAt])
  @@map("usertokenclaims")
  @@schema("public")
}

enum Role {
  USER
  ADMIN
  SELLER

  @@schema("public")
}

enum KYCStatus {
  init
  pending
  prechecked
  queued
  completed
  onHold
  failed

  @@schema("public")
}

enum PaymentStatus {
  CREATED
  SUCCEEDED
  FAILED
  REFUNDED

  @@schema("public")
}

enum OrderStatus {
  pending
  prepaid
  preprocessed
  paid
  processed
  errored
  pendingRefund
  refunded
  pendingExit
  exited

  @@schema("public")
}

enum OrderType {
  BUY
  SELL

  @@schema("public")
}

enum OrderExecutionType {
  INITIAL // BUY order on the primary market
  LIMIT
  MARKET

  @@schema("public")
}

enum FundsSourceType {
  CREDIT_CARD
  WALLET_EUR
  FREE_CREDITS
  FREE_TOKEN // Token claims are converted to orders with a FREE_TOKEN fund source when claimed
  DIVERSIFIED // Those funds were spent outside of the PSP env (to purchase an asset for instance), only propco user can create orders with this fund source

  @@schema("public")
}

enum NotificationStatus {
  pending
  sending
  pushed
  muted
  errored

  @@schema("public")
}

model SandboxOrder {
  id                String             @id @default(cuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  projectId         String
  userId            String
  amount            Decimal            @db.Decimal(12, 2)
  currency          String             @default("EUR")
  quantityInDecimal BigInt             @db.Int8
  paymentId         String?            @unique
  paymentStatus     PaymentStatus?
  status            OrderStatus        @default(pending)
  fundsSource       FundsSourceType?
  invoiceUrl        String?
  type              OrderType          @default(BUY)
  executionType     OrderExecutionType @default(INITIAL)
  version           Int                @default(0)

  project Project @relation(fields: [projectId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@index([userId, projectId, status, createdAt])
  @@map("orders")
  @@schema("sandbox")
}

model SandboxUserTokenClaim {
  id                String   @id @default(cuid())
  userId            String
  quantityInDecimal BigInt   @default(1000) @db.Int8
  createdAt         DateTime @default(now())
  expiresAt         DateTime @default(dbgenerated("(now() + '90 days'::interval)::timestamp"))
  poolId            String

  user User          @relation(fields: [userId], references: [id])
  pool FreeTokenPool @relation(fields: [poolId], references: [id])

  @@index([userId, createdAt])
  @@map("usertokenclaims")
  @@schema("sandbox")
}

view SandboxUserToken {
  userId      String
  projectId   String
  amountSpent Decimal @db.Decimal(12, 2)
  currency    String  @default("EUR")
  quantity    Decimal
  lastPrice   Decimal @db.Decimal(12, 2)
  lastValue   Decimal @db.Decimal(12, 2)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("usertokens")
  @@schema("sandbox")
}
